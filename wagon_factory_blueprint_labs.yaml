tosca_definitions_version: cloudify_dsl_1_3

imports:

  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.5/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml
  - types/labs.yaml
  - types/openvpn.yaml

inputs:

  image_id:
    type: string
    default: 'aee5438f-1c7c-497f-a11e-53360241cf0f'

  flavor_id:
    type: string
    default: '4d798e17-3439-42e1-ad22-fb956ec22b54'

  cloudify_version:
    type: string
    default: "4.0"

  wagon_version:
    type: string
    default: "0.3.2"

  agent_user:
    type: string
    default: 'centos'



node_templates:


  vpn_floating_ip:
    type: cloudify.openstack.nodes.FloatingIP

  def_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      use_external_resource: False
      security_group:
        description: VCPE security security group
      rules:
        - port: 22
          remote_ip_prefix: '0.0.0.0/0'
        - port: 80
          remote_ip_prefix: '0.0.0.0/0'

#
#  Infra.
#

  vactory_vm:
    type: cloudify.openstack.nodes.Server
    properties:
      server:
        image: { get_input: image_id }
        flavor: { get_input: flavor_id }
      cloudify_agent:
        user: { get_input: agent_user }
    relationships:
      - target: vpn_floating_ip
        type: cloudify.openstack.server_connected_to_floating_ip
      - target: def_security_group
        type: cloudify.openstack.server_connected_to_security_group

  wagon_builder:
    type: cloudify.nodes.ApplicationModule
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/wagon_start.sh
          inputs:
            wagon_version: { get_input: wagon_version }
            cloudify_version: { get_input: cloudify_version }
            plugin_zip: { get_input: plugin_zip }

    relationships:
      - target: vactory_vm
        type: cloudify.relationships.contained_in

  web_server:
    type: cloudify.nodes.ApplicationModule
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/webserver_start.sh
    relationships:
      - target: vactory_vm
        type: cloudify.relationships.contained_in

  tunnel:
    type: labs.networking.sshtunnel
    relationships:
      - target: vactory_vm
        type: cloudify.relationships.contained_in
